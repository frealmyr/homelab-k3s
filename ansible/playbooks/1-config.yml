---
- hosts: k3s_server, k3s_agent
  become: true

  vars:
    synology_ip: 10.7.0.11

  tasks:
    ###############
    ## Static IP ##
    ###############

    - name: network - configure static ip
      copy:
        dest: /etc/systemd/network/20-ethernet.network
        content: "{{ content }}"
      vars:
        content: |
          [Match]
          Name=eth0

          [Network]
          DHCP=no
          DNS=10.2.0.1
          NTP=no.pool.ntp.org

          [Route]
          Gateway=10.2.0.1
          Metric=1024

          [Address]
          Address=10.2.0.10/16
          RouteMetric=50
      when: ["'k3s_server' in group_names"]

    - name: network - configure static ip
      copy:
        dest: /etc/systemd/network/20-ethernet.network
        content: "{{ content }}"
      vars:
        content: |
          [Match]
          Name=eth0

          [Network]
          DHCP=no
          DNS=10.2.0.1
          NTP=no.pool.ntp.org

          [Route]
          Gateway=10.2.0.1
          Metric=1024

          [Address]
          Address=10.2.0.11/16
          RouteMetric=50
      when: ["'k3s_agent' in group_names"]

    - name: network - enable systemd services
      systemd:
        name: "systemd-networkd"
        enabled: yes
        masked: no
        state: started
      with_items:
        - systemd-networkd
        - systemd-resolved
        - systemd-timesyncd


    ##############
    ## Hostname ##
    ##############

    - name: hostname - change if mismatch from inventory name
      hostname: name="{{ inventory_hostname }}"
      when: ansible_fqdn != ansible_ssh_host
      register: hostname

    - name: hostname - fix /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: "127.0.1.1    {{ ansible_hostname }}"
        state: present
      when: hostname.changed

    - name: system - reboot
      reboot:
      when: hostname.changed

    - name: hostname - validate ansible_fqdn == inventory_hostname
      tags:
        - validate
      assert:
        that: ansible_fqdn == inventory_hostname

    ##########
    ## Swap ##
    ##########

    - name: swap - remove swapfile from /etc/fstab if it exist
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - none
        - swap

    - name: swap - mask swap dphys service
      service:
        name: dphys-swapfile
        enabled: no
        masked: yes
        state: stopped

    - name: swap - disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    ##################
    ## Raspberry Pi ##
    ##################

    - name: rpi - enable cgroups for limiting resources for containers
      replace:
        path: /boot/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_enable=cpuset"
        - "cgroup_enable=memory"
        - "cgroup_memory=1"
        - "swapaccount=1"

    - name: rpi - set config parameters
      lineinfile:
        path: /boot/config.txt
        regexp: "{{ item.find }}"
        line: "{{ item.value }}"
        state: present
      with_items:
        - find: ^gpu_mem=.*
          value: gpu_mem=16
        - find: ^dtparam=audio=on
          value: "#dtparam=audio=on"
        - find: ^dtoverlay=disable-bt
          value: dtoverlay=disable-bt
        - find: ^dtoverlay=disable-wifi
          value: dtoverlay=disable-wifi

    - name: rpi - disable services
      systemd:
        name: "{{ item }}"
        enabled: no
        masked: yes
        state: stopped
      with_items:
        - hciuart.service
        - man-db.timer
        - raspi-config.service
        - rpi-eeprom-update.service
        - wpa_supplicant.service

    - name: rpi - fstab move logs to RAM
      lineinfile:
        path: /etc/fstab
        regexp: "^tmpfs \/var\/log.*"
        line: "tmpfs /var/log tmpfs defaults,noatime,mode=0755 0 0"
        state: present

    # UNI-T voltmeter shows 1.15A max with USB SSD connected. So around 1A lower than the 2.4A max the PSU provides.
    # The 120mm desktop FAN which is connected to the same power supply should cool this effectivly
    - name: rpi - overclock to 2.0GHz
      lineinfile:
        path: /boot/config.txt
        regexp: "{{ item.find }}"
        line: "{{ item.value }}"
        state: present
      with_items:
        - find: .*over_voltage=.*
          value: over_voltage=6
        - find: .*arm_freq=.*
          value: arm_freq=2000

    ########################
    ## Modprobe / Systemd ##
    ########################

    - name: modprobe - enable modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: modprobe - load modules on boot
      lineinfile:
        path: /etc/modules
        line: "{{item}}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: systemctl - tweak parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
        ignoreerrors: no
      with_dict: "{{ sysctl_config }}"
      vars:
        sysctl_config:
          fs.inotify.max_user_instances: 512
          fs.inotify.max_user_watches: 524288
          net.bridge.bridge-nf-call-ip6tables: 1
          net.bridge.bridge-nf-call-iptables: 1
          net.core.rmem_max: 2500000
          net.ipv4.conf.all.forwarding: 1
          net.ipv4.ip_forward: 1
          net.ipv6.conf.all.forwarding: 1

    #########
    ## K3s ##
    #########

    # K3s default is to keep containers running after shutdown
    # rPi unable to handle I/O during startup, k3s-server crashlooping, solution to kill all containers on before starting k3s
    - name: systemd - stop k3s containers on shutdown
      copy:
        dest: /etc/systemd/system/k3s-killall.service
        content: "{{ content }}"
      vars:
        content: |
          [Unit]
          Description=Stop k3s containers on before k3s-server
          After=network.target
          Before=k3s.service

          [Service]
          Type=oneshot
          User=1000
          Group=1000
          ExecStart=/usr/local/bin/k3s-killall.sh
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target k3s.service

    - name: systemd - restart and enable service
      systemd:
        name: k3s-killall.service
        daemon_reload: true
        enabled: true

    #########
    ## UPS ##
    #########

    # Piggyback the UPS running on Synology NAS, remember to allowlist the rPi IP's.
    - name: ups - configure nut to use netclient
      replace:
        path: /etc/nut/nut.conf
        regexp: '^MODE=none'
        replace: 'MODE=netclient'

    - name: ups - configure nut to monitor nas
      lineinfile:
        path: /etc/nut/upsmon.conf
        regexp: '^MONITOR.*'
        line: "MONITOR ups@{{ interface.synology }} 1 monuser secret slave"
        state: present
      vars:
        interface:
          synology: 10.2.0.20

    - name: ups - restart and enable service
      service:
        name: nut-client
        enabled: yes
        state: restarted

    ########################
    ## Automated upgrades ##
    ########################

    - name: unattended-upgrades - configure package pattern match
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: "{{ content }}"
      vars:
        content: |
          Unattended-Upgrade::Origins-Pattern {
                  "origin=Raspbian,codename=${distro_codename},label=Raspbian";
                  "origin=Raspberry Pi Foundation,codename=${distro_codename},label=Raspberry Pi Foundation";
          };
          Unattended-Upgrade::Automatic-Reboot "true";
          Unattended-Upgrade::Automatic-Reboot-Time "03:00";
      register: unattended_upgrades

    - name: unattended-upgrades - configure to check for updates each week
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: "{{ content }}"
      vars:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "3";
          APT::Periodic::Verbose "1";
          APT::Periodic::Unattended-Upgrade "1";
      register: auto_upgrades

    - name: unattended-upgrades - restart and enable service
      service:
        name: unattended-upgrades.service
        enabled: yes
        state: restarted
      when: unattended_upgrades.changed or auto_upgrades.changed

    ###########
    ## Users ##
    ###########

    - name: users - create non-root users
      user:
        uid: "{{ item.id }}"
        name: "{{ item.name }}"
        create_home: false
        shell: /usr/sbin/nologin
        state: present
      loop:
        - { id: 2000, name: entertainment }
      when: ["'k3s_agent' in group_names"]

    #############
    ## Folders ##
    #############

    - name: folder - create homelab folders
      file:
        path: "{{ item }}"
        state: directory
        group: root
        mode: 0600
      loop:
        - /var/lib/homelab
        - /var/lib/homelab/volumes
        - /var/lib/homelab/volumes/dynamic
        - /var/lib/homelab/volumes/static

    - name: folder - create shared media folder
      file:
        path: "{{ item }}"
        state: directory
        owner: 2000
        group: 2000
        recurse: true
        mode: 0777
      with_items:
        - /media/shared
        - /media/shared/anime
        - /media/shared/anime/series
        - /media/shared/anime/movies
        - /media/shared/tv-series
      when: ["'k3s_agent' in group_names"]

    - name: nfs - add shared media folder export
      blockinfile:
        path: /etc/exports
        block: /media/shared 10.1.0.0/24(rw,all_squash,insecure,async,no_subtree_check,anonuid=2000,anongid=2000)
      when: ["'k3s_agent' in group_names"]

    - name: nfs - reload nfs exports
      command: exportfs -ra
      when: ["'k3s_agent' in group_names"]

    ############
    ## Reboot ##
    ############

    - name: system - reboot (configuration)
      reboot:
